			+--------------------+
			|       CSE 521      |
			| PROJECT 1: THREADS |
			|   DESIGN DOCUMENT  |
			+--------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sumit Kumar <skumar34@buffalo.edu>
Keshav Jethaliya <keshavje@buffalo.edu>
Christopher Sam Roy <croy2@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

			     ALARM CLOCK
			     ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	===========
	in thread.h
	===========

	1. int64_t wakeup_ticks;								// NEW MEMBER of struct thread
		Wakeup_ticks needs to be calculated based on the current system ticks and the number of ticks for which the thread is sleeping.

	2. struct sema t_sema;									// NEW MEMBER of struct thread
		The t_sema semaphore of a thread will help us maintain synchronization of multiple threads.


	===========
	in thread.c
	===========

	1. static struct list thread_sleep_insert_ordered;		// NEW MEMBER of struct thread
		We will define a new list thread_sleep_insert_ordered which is used to sort threads in increasing order of wakeup ticks.


---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

	timer_sleep() will be modified to remove busy waiting by calculating the wakeup_ticks of the calling thread and pushing it to a sleeping thread list which is sorted on wakeup_ticks, as timer_interrupt() is called on every tick we can check there if any thread in the sleeping list needs to wake up, if the waking time of the thread has come, it'll be waken up and removed from the list.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?
	sorted list based on ascending wakeup_ticks order is used to save the thread which needs to be waken up their wake up ticks, so for every tick it is checked whether a thread(s) needs to be waken up, instead of checking the full unordered list.



---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?
	Semaphore will be used to avoid race condition between multiple thread calls to timer_sleep()


>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?
	Semaphore will be used to avoid race condition even if an interrupt occurs during a call to timer_sleep()


---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?
	We've removed busy waiting from timer_sleep() which was wasting the cpu by doing nothing, we've used sorted list based on wakeup_ticks of the threads and waking them up in timer_interrupt() which already runs on every ticks of the system, and it is optimized by checking only the threads whose waking up ticks has alrady passed. Before this, we thought of an unordered list maintaining sleeping threads, but that needs to be iterated fully on every tick inside timer_interrupt().


			 PRIORITY SCHEDULING
			 ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

			  ADVANCED SCHEDULER
			  ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

	===========
	in thread.h
	===========

	1. int nice;					// NEW MEMBER of struct thread
		nice value of a particular thread, can be range b/w +20 to -20, a positive value denotes it can give up some of its CPU time, while a -ve value denotes 

	2. int recent_cpu;				// NEW MEMBER of struct thread
		denotes the CPU time the thread got recently


	===========
	in thread.c
	===========

	1. static int load_avg;
		gives an estimate of average number of threads ready to run over the past minute.


---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  	recent_cpu    	priority   		thread
ticks   A   B   C   	A   B   C   	to run
-----  	--  --  --  	--  --  --   	------
 0		0	0	0		63	61	59		A
 4		4	0	0		62	61	59		A
 8		8	0	0		61	61	59		B
12		8	4	0		61	60	59		A
16		12	4	0		60	60	59		B
20		12	8	0		60	59	59		C
24		12	8	4		60	59	58		A
28		16	8	4		59	59	58		B
32		16	12	4		59	58	58		A
36		20	12	4		58	58	58		C

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

	Yes, it is not specified what has to be done in case if more than 1 threads has same priority. In our case, we have chosen to FALLBACK to FCFS if 2 or more threads are having the same priority.

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
