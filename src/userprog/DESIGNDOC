            +--------------------------+
            |          CS 521          |
            | PROJECT 2: USER PROGRAMS |
            |     DESIGN DOCUMENT      |
            +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Sumit Kumar <skumar34@buffalo.edu>
Keshav Jethaliya <keshavje@buffalo.edu>
Christopher Sam Roy <croy2@buffalo.edu>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    1. int argc;        // Number of arguments.
    2. int max_args;    // Max number of arguments allowed.
    3. char *argv[];    // List of arguments.
    4. char *token;     // This will hold the token generated by the strtok_r().
    5. char *save_ptr;  // A save pointer is the address of a string (that needs to be tokenize), used to keep track of the tokenizer's position.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

    1. We will be using strtok_r() function for tokenizing the command-line input into individual tokens.
    2. Push the address of each token from left to right (reverse) order, then push argv and argc.
    3. To avoid overflowing, we make a check at the number of arguments being passed, if it overflows the stack, we exit.
    4. We'll be changing *esp = PHYS_BASE to *esp = PHYS_BASE - 12.
    5. Adding functionality in process_execute() to process multiple arguments.


---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

    1. Here 'r' stands for "reentrant" which means that it can interrupted in between of execution and finally resume the earlier execution without hampering it's actual (earlier) course of action in any way.

    2. strtok_r() is using the save pointer which is being passed as an argument whenever it is invoked and if a context switch occurs when a thread changes, there won't be any problems as there would be if strtok() was used.

>> A4: In Pintos, the kernel separates commands into an executable name
>> and arguments. In Unix-like systems, the shell does this
>> separation. Identify at least two advantages of the Unix approach.

    1. It checks if the executable is present in the call to the kernel and avoid kernel panic (failure/crash).

    2. To check if passed arguments are within the allowed limit and if a very large number of arguments are passed and it was handled at kernel level, it could have crashed the kernel, now only shell will crash.

    3. To spare the kernel from doing string cleaning/tokenization stuff which is somewhat not of very much of use and hence kernel is spared to do the real necessary tasks instead of performing hackneyed tasks such as string tokenization etc.

                SYSTEM CALLS
                ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

    We haven't given it a proper thought, so it is yet to implement.

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

    We haven't given it a proper thought, so it is yet to implement.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

    We haven't given it a proper thought, so it is yet to implement.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

    We haven't given it a proper thought, so it is yet to implement.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

    We haven't given it a proper thought, so it is yet to implement.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

    We haven't given it a proper thought, so it is yet to implement.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

    We haven't given it a proper thought, so it is yet to implement.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

    We haven't given it a proper thought, so it is yet to implement.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

    We haven't given it a proper thought, so it is yet to implement.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

    We haven't given it a proper thought, so it is yet to implement.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

    We haven't given it a proper thought, so it is yet to implement.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
